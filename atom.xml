<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tao173.github.io</id>
    <title>Tao</title>
    <updated>2022-04-01T14:12:36.863Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tao173.github.io"/>
    <link rel="self" href="https://tao173.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tao173.github.io/images/avatar.png</logo>
    <icon>https://tao173.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Tao</rights>
    <entry>
        <title type="html"><![CDATA[使用 GitHub Actions 云编译 OpenWrt]]></title>
        <id>https://tao173.github.io/post/shi-yong-github-actions-yun-bian-yi-openwrt/</id>
        <link href="https://tao173.github.io/post/shi-yong-github-actions-yun-bian-yi-openwrt/">
        </link>
        <updated>2022-03-25T15:46:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="原文链接httpsp3terxcomarchivesbuild-openwrt-with-github-actionshtml">原文链接：https://p3terx.com/archives/build-openwrt-with-github-actions.html</h2>
<p>前言<br>
Github Ac­tions 是 Mi­crosoft 收购 GitHub 后推出的 CI/​CD 服务，它提供了性能配置非常不错的虚拟服务器环境（E5 2vCPU/​7G RAM），基于它可以进行构建、测试、打包、部署项目。对于公开仓库可免费无时间限制的使用，且单次使用时间长达 6 个小时，这对于编译 Open­Wrt 来说是非常充足的。不过 GitHub Ac­tions 有一定的使用门槛，首先要了解如何编写 workflow 文件。不过不用担心，博主已经编写好了相关的 work­flow 文件模版，只需要按照教程的步骤来操作即可。</p>
<p>方案特点<br>
免费<br>
一键快速编译<br>
定时自动编译<br>
客制化编译<br>
并发编译（可同时进行20个编译任务）<br>
无需搭建编译环境（在线make menuconfig生成配置文件)<br>
无需消耗自己的计算机与服务器的计算资源（性感E5在线编译）<br>
无需担心磁盘空间不足（近60G磁盘空间）<br>
无需使用清理文件（内核更新不怕 boom ）<br>
编译速度快（编译时间1-2小时）<br>
编译成功率提升200%（万兆自由网络环境）<br>
全新环境（杜绝编译环境不干净导致编译失败）<br>
本解决方案是一个开放平台，任何人都可以基于此打造自己专属的编译方案。<br>
项目地址<br>
https://github.com/P3TERX/Actions-OpenWrt</p>
<p>支持项目请随手点个 star，让更多的人发现、使用并受益。</p>
<p>准备工作<br>
GitHub 账号<br>
搭建编译环境，生成.config文件。(可选)<br>
TIPS: 关于编译环境的搭建，推荐去看我之前写的相关文章，Win­dows 10 可以使用 WSL ，ma­cOS、Linux 可以使用 Docker 。<br>
教程更新<br>
2021-01-03 新增源码更新自动编译使用说明<br>
2020-10-11 新触发方式使用方法、更新上传固件到 releases 页面说明。<br>
2020-04-25 更新 DIY 脚本说明、添加自定义 feeds 配置文件说明<br>
2020-04-09 新增上传固件到 WeTransfer<br>
2020-03-30 新增上传固件到奶牛快传<br>
2020-02-01 新图文教程<br>
2019-12-10 新增 macOS 编译方案使用说明<br>
2019-12-06 添加 tmate 网页终端链接说明<br>
2019-12-05 优化基础使用教程，添加 @lietxia 大佬的图文教程链接<br>
2019-12-04 新增云menuconfig使用方法<br>
2019-12-03 新增并发编译使用方法<br>
2019-11-30 新增自定义源码编译使用方法<br>
2019-11-14 全网独家首发<br>
基础使用<br>
首先你必须要熟悉整个 Open­Wrt 的编译过程，这会让你非常容易的理解如何使用 GitHub Ac­tions 进行编译，即使你没有成功过。因为实际上本地编译近 90% 失败的原因是因为网络问题导致的，中国大陆特色，咱也不敢多说。GitHub Ac­tions 服务器由 Mi­crosoft Azure 提供，拥有万兆带宽，可以使编译成功率大大提升。</p>
<p>在自己搭建编译环境中使用 Lean's OpenWrt 源码生成.config文件。（或使用直接 SSH 连接到 Actions 进行操作，后面有说明。）<br>
TIPS: 方案默认引用 Lean 的源码，因为他的 README 影响了我开始学习编译，也就有了这个项目，而且他的源码非常的优秀。有其它需求可自行修改 work­flow 文件，方法后面的进阶使用中有说明。<br>
进入 P3TERX/Actions-OpenWrt 项目页面，点击页面中的 Use this template （使用这个模版）按钮。<br>
<img src="https://tao173.github.io/post-images/1648223520026.png" alt="" loading="lazy"></p>
<p>填写仓库名称，然后点击Create repository from template（从模版创建储存库）按钮。<br>
<img src="https://tao173.github.io/post-images/1648223568225.png" alt="" loading="lazy"><br>
经过几秒钟的等待，页面会跳转到新建的仓库，内容和我的项目是相同的。然后点击Create new file（创建新文件）按钮。<br>
<img src="https://tao173.github.io/post-images/1648223573223.png" alt="" loading="lazy"><br>
文件名填写为.config，把生成的.config 文件的内容复制粘贴到下面的文本框中。<br>
<img src="https://tao173.github.io/post-images/1648223578323.png" alt="" loading="lazy"><br>
翻到页面最下方，点击Commit new file（提交新文件）按钮。<br>
<img src="https://tao173.github.io/post-images/1648223584573.png" alt="" loading="lazy"><br>
在 Actions 页面选择Build OpenWrt，然后点击Run Workflow按钮，即可开始编译。（如果需要 SSH 连接则把SSH connection to Actions的值改为true。其它详情参见进阶使用相关章节）<br>
<img src="https://tao173.github.io/post-images/1648223629868.png" alt="" loading="lazy"><br>
在等待编译完成的过程中，你可以进入这个页面点击右上角的star，这是对博主最大的支持，而且还可以加快编译速度哦（雾<br>
最后经过一两个小时的等待，不出意外你就可以在 Actions 页面看到已经打包好的固件目录压缩包。<br>
<img src="https://tao173.github.io/post-images/1648223636387.png" alt="" loading="lazy"><br>
TIPS: 如需 ipk 文件可以在进阶使用章节找到方法。因为大多数人只需要固件，而且总是有萌新问固件在哪，所以现在默认只上传固件。<br>
进阶使用<br>
自定义环境变量与功能<br>
点击查看<br>
打开 work­flow 文件（.github/workflows/build-openwrt.yml），你会看到有如下一些环境变量，可按照自己的需求对这些变量进行定义。</p>
<p>env:<br>
REPO_URL: https://github.com/coolsnowwolf/lede<br>
REPO_BRANCH: master<br>
FEEDS_CONF: feeds.conf.default<br>
CONFIG_FILE: .config<br>
DIY_P1_SH: diy-part1.sh<br>
DIY_P2_SH: diy-part2.sh<br>
UPLOAD_BIN_DIR: false<br>
UPLOAD_FIRMWARE: true<br>
UPLOAD_COWTRANSFER: false<br>
UPLOAD_WETRANSFER: false<br>
UPLOAD_RELEASE: false<br>
TZ: Asia/Shanghai<br>
TIPS: 修改时需要注意:(冒号)后面有空格。<br>
环境变量	功能<br>
REPO_URL	源码仓库地址<br>
REPO_BRANCH	源码分支<br>
FEEDS_CONF	自定义feeds.conf.default文件名<br>
CONFIG_FILE	自定义.config文件名<br>
DIY_P1_SH	自定义diy-part1.sh文件名<br>
DIY_P2_SH	自定义diy-part2.sh文件名<br>
UPLOAD_BIN_DIR	上传 bin 目录。即包含所有 ipk 文件和固件的目录。默认false<br>
UPLOAD_FIRMWARE	上传固件目录。默认true<br>
UPLOAD_COWTRANSFER	上传固件到奶牛快传。默认false<br>
UPLOAD_WERANSFER	上传固件到 WeTransfer 。默认false<br>
UPLOAD_RELEASE	上传固件到 releases 。默认false<br>
TZ	时区设置<br>
DIY 脚本<br>
点击查看<br>
仓库根目录目前有两个 DIY 脚本：diy-part1.sh 和 diy-part2.sh，它们分别在更新与安装 feeds 的前后执行，你可以把对源码修改的指令写到脚本中，比如修改默认 IP、主机名、主题、添加 / 删除软件包等操作。但不仅限于这些操作，发挥你强大的想象力，可做出更强大的功能。</p>
<p>TIPS: 脚本工作目录在源码目录，内附几个简单的例子供参考。<br>
添加额外的软件包<br>
点击查看<br>
在 DIY 脚本中加入对指定软件包源码的远程仓库的克隆指令。就像下面这样：<br>
git clone https://github.com/P3TERX/xxx package/xxx<br>
本地make menuconfig生成.config文件时添加相应的软件包，如果你知道包名可以直接写到.config文件中。<br>
TIPS: 如果额外添加的软件包与 Open­Wrt 源码中已有的软件包同名的情况，则需要把 Open­Wrt 源码中的同名软件包删除，否则会优先编译 Open­Wrt 中的软件包。这同样可以利用到的 DIY 脚本，相关指令应写在diy-part2.sh。<br>
原理是把软件包源码放到 package 目录下，编译时会自动遍历，与本地编译是一样的。当然方法不止一种，其它方式请自行探索。</p>
<p>自定义 feeds 配置文件<br>
把 feeds.conf.default 文件放入仓库根目录即可，它会覆盖 Open­Wrt 源码目录下的相关文件。</p>
<p>Custom files（自定义文件）<br>
俗称 “files 大法”，在仓库根目录下新建 files 目录，把相关文件放入即可。有关详情请自行搜索了解。</p>
<p>自定义源码<br>
默认引用的是 Lean 的源码，如果你有编译其它源码的需求可以进行替换。</p>
<p>点击查看<br>
编辑 work­flow 文件（.github/workflows/build-openwrt.yml），修改下面的相关环境变量字段。</p>
<p>REPO_URL: https://github.com/coolsnowwolf/lede<br>
REPO_BRANCH: master<br>
比如修改为 Open­Wrt 官方源码 19.07 分支</p>
<p>REPO_URL: https://github.com/openwrt/openwrt<br>
REPO_BRANCH: openwrt-19.07<br>
TIPS: 注意冒号后面有空格<br>
源码更新自动编译<br>
在检测到源码更新后自动进行编译。</p>
<p>点击查看<br>
创建 Personal access token(PAT) ，勾选repo权限，这将用于自动触发编译工作流程。<br>
<img src="https://tao173.github.io/post-images/1648223680612.png" alt="" loading="lazy"></p>
<p>然后点击自己仓库的Settings选项卡，再点击Secrets。添加名为ACTIONS_TRIGGER_PAT的加密环境变量，保存刚刚创建的 PAT 。<br>
<img src="https://tao173.github.io/post-images/1648223694283.png" alt="" loading="lazy"></p>
<p>在 Actions 页面选择Update Checker，点击Run workflow手动进行一次测试运行。如果没有报错且 OpenWrt 编译工作流程被触发，则代表测试通过。<br>
最后编辑Update Checker的 workflow 文件（.github/workflows/update-checker.yml），取消注释（删除#）定时触发相关的部分。这里可以根据 cron 格式来设定检测的时间，时区为 UTC 。</p>
<h1 id="schedule">schedule:</h1>
<h1 id="-cron-0-18">- cron: 0 */18 * * *</h1>
<p>此外还可以根据实际情况对监视的源码仓库进行更改，如果有多个源码仓库需要监视则多复制几份相应的 work­flow 文件。</p>
<p>编译多个固件<br>
多 repository 方案<br>
通过 P3TERX/Actions-OpenWrt 项目创建多个仓库来编译不同架构机型的 Open­Wrt 固件。</p>
<p>多 workflow 方案<br>
基于 GitHub Ac­tions 可同时运行多个工作流程的特性，最多可以同时进行至少 20 个编译任务。也可以单独选择其中一个进行编译，这充分的利用到了 GitHub Ac­tions 为每个账户免费提供的 20 个 Ubuntu 虚拟服务器环境。</p>
<p>点击查看<br>
假设有三台路由器的固件需要编译，比如 K2P、x86_64 软路由、新路由 3。</p>
<p>生成它们的.config文件<br>
分别将它们重命名为k2p.config、x64.config、d2.config放入本地仓库根目录。<br>
复制多个 workflow 文件（.github/workflows/build-openwrt.yml）。为了更好的区分可以对它进行重命名，比如k2p.yml、x64.yml、d2.yml。此外第一行name字段也可以进行相应的修改。<br>
然后分别用上面修改的文件名替换对应 workflow 文件中下面两个位置的.config，不同的机型同样可以使用不同的 DIY 脚本。<br>
...<br>
paths:<br>
- '.config'<br>
...<br>
CONFIG_FILE: '.config'<br>
DIY_SH: 'diy.sh'<br>
...<br>
SSH 连接到 Actions<br>
通过 tmate 连接到 GitHub Ac­tions 虚拟服务器环境，可直接进行 make menuconfig 操作生成编译配置，或者任意的客制化操作。也就是说，你不需要再自己搭建编译环境了。这可能改变之前所有使用 GitHub Ac­tions 的编译 Open­Wrt 方式。</p>
<p>点击查看<br>
在Run Workflow时把SSH connection to Actions的值改为true（或者也可以不修改，而是通过 webhook 方式发送带有ssh触发关键词的请求。）<br>
在触发工作流程后，在 Actions 日志页面等待执行到SSH connection to Actions步骤，会出现类似下面的信息：<br>
To connect to this session copy-n-paste the following into a terminal or browser:</p>
<p>ssh Y26QeagDtsPXp2mT6me5cnMRd@nyc1.tmate.io</p>
<p>https://tmate.io/t/Y26QeagDtsPXp2mT6me5cnMRd<br>
复制 SSH 连接命令粘贴到终端内执行，或者复制链接在浏览器中打开使用网页终端。（网页终端可能会遇到黑屏的情况，按 Ctrl+C 即可）<br>
cd openwrt &amp;&amp; make menuconfig<br>
完成后按Ctrl+D组合键或执行exit命令退出，后续编译工作将自动进行。<br>
TIPS: 固件目录下有个config.seed或者config.buildinfo文件，如果你需要再次编译可以使用它。<br>
上传固件到奶牛快传<br>
奶牛快传是中国大陆的一款临时文件传输分享服务网盘，特点是不限速。因国情所致，中国大陆地区 GitHub 访问速度缓慢，有些小伙伴可能无法正常下载固件，上传固件到奶牛快传是个非常好的选择。</p>
<p>点击查看<br>
编辑 workflow 文件（.github/workflows/build-openwrt.yml），将环境变量UPLOAD_COWTRANSFER的值修改为true：<br>
UPLOAD_COWTRANSFER: true<br>
编译完成后你可以在相关的 workflow 页面或者Upload firmware to cowtransfer步骤的日志中找到下载链接。<br>
CLI 上传工具来自 Mikubill/transfer ，特此感谢。<br>
上传固件到 WeTransfer<br>
WeTransfer 是荷兰的一款临时文件传输分享服务网盘，前面提到的奶牛快传实际上师从自它，二者的网站都非常相似。We­Trans­fer 使用的是 Ama­zon S3 存储并通过 Ama­zon Cloud­Front CDN 全球加速，它在中国大陆的下载体验完全不输奶牛快传，甚至某些情况下要更好。</p>
<p>点击查看<br>
编辑 workflow 文件（.github/workflows/build-openwrt.yml），将环境变量UPLOAD_WERANSFER的值修改为true：<br>
UPLOAD_WERANSFER: true<br>
编译完成后你可以在相关的 workflow 页面或者Upload firmware to WeTransfer步骤的日志中找到下载链接。<br>
CLI 上传工具来自 Mikubill/transfer ，特此感谢。<br>
上传固件到 Releases 页面<br>
GitHub 的 Re­leases 页面通常用于发布打包好的二进制文件，无需登录即可下载。Ar­ti­facts 和网盘有保存期限，Re­leases 则是永久保存的。</p>
<p>点击查看<br>
编辑 work­flow 文件（.github/workflows/build-openwrt.yml），将环境变量 UPLOAD_WERANSFER 的值修改为 true：</p>
<p>UPLOAD_RELEASE: true<br>
编译完成后你可以在 re­leases 页面找到下载链接。</p>
<p>TIPS: 为了不给 GitHub 服务器带来负担，默认保留 3 个历史记录。<br>
定时自动编译（已弃用）<br>
点击查看<br>
TIPS: 源码更新是不确定的，定时编译经常是在编译没有变动的源码，无意义且浪费资源，所以不建议使用。<br>
编辑 work­flow 文件（.github/workflows/build-openwrt.yml）取消注释下面两行。</p>
<h1 id="schedule-2">schedule:</h1>
<h1 id="-cron-0-8-5">- cron: 0 8 * * 5</h1>
<p>例子是北京时间每周五下午 4 点（16 时）开始编译（周末下班回家直接下载最新固件开始折腾）。如需自定义则按照 cron 格式修改即可，GitHub Ac­tions 的时区为 UTC ，注意按照自己所在地时区进行转换。</p>
<p>点击 star 开始编译（已弃用）<br>
点击查看<br>
点击自己仓库页面上的 Star 按钮开始编译，为了防止产生垃圾记录，所以这个功能默认没有开启。</p>
<p>编辑 work­flow 文件（.github/workflows/build-openwrt.yml）取消注释下面两行，后续点击自己仓库上的 star 即可开始编译。</p>
<h1 id="watch">watch:</h1>
<h1 id="types-started">types: started</h1>
<p>TIPS: 字段started并不是“开始了”的意思，而是“已经点击 Star”。<br>
吐槽: 官方并没有提供一个开始按钮，通过搜索找到过很多奇怪的一键触发方式，但都是通过 Web­hook 来实现的。机智的我发现了可以通过点击 Star 来触发，这样就相当于把 Star 当成开始按钮。这个started有种一句双关的意思了。<br>
macOS 虚拟机编译方案（已弃用）<br>
点击查看<br>
GitHub Ac­tions 的 ma­cOS 虚拟机性能要高于 Ubuntu 虚拟机，所以使用它编译 Open­Wrt 理论上速度会更快。博主经过几天时间的研究已经总结出了 macOS 下的 OpenWrt 编译环境的搭建方法，并编写出了适用于 ma­cOS 虚拟环境的 Open­Wrt 编译方案的 work­flow 文件。</p>
<p>由于极少有开发者会考虑兼容 ma­cOS 下的规范，所以使用 ma­cOS 编译 Open­Wrt 不可避免的会遇到非常多的问题，甚至 Open­Wrt 官方源码也是。而且后续测试发现 ma­cOS 虚拟机性能已大幅下降，故相关 work­flow 文件已经移除。也不建议任何人使用 ma­cOS 编译 Open­Wrt 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在OpenWrt上安装MQTT+Z2M]]></title>
        <id>https://tao173.github.io/post/zai-openwrt-shang-an-zhuang-he-pei-zhi-mosquitto/</id>
        <link href="https://tao173.github.io/post/zai-openwrt-shang-an-zhuang-he-pei-zhi-mosquitto/">
        </link>
        <updated>2022-03-25T15:43:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="原文链接httpswwwonetransistoreu201905mosquitto-mqtt-on-openwrt-routerhtmlm1">原文链接：https://www.onetransistor.eu/2019/05/mosquitto-mqtt-on-openwrt-router.html?m=1</h2>
<p>在 OpenWrt 上安装 Mosquitto，并使用不同的安全设置配置多个侦听器：未加密、TLS PSK 和 TLS 证书加密<br>
上一篇文章是关于MQTT安全层，运行本地MQTT服务器的优势以及如何构建物联网。OpenWrt 路由器应准备好安装和设置服务器（代理）软件。软件存储库包含Eclipse Mosquitto软件的两个变体。其中一个是在没有 SSL 支持的情况下构建的。如果安装该客户端，您将无法接受安全客户端。启用SSL的变体需要更多的内部存储空间，这是它们提供两个版本的主要原因。</p>
<p>我使用的路由器具有Broadcom SoC和16 MB的内部存储空间。安装支持SSL的构建版本Mosquitto后，仍有86%的可用空间。在这篇文章中，我将向您展示如何配置 Mosquitto 代理以侦听多个端口并接受具有不同安全设置的客户端。这是因为并非所有具有网络连接的微控制器都具有足够的 TLS/SSL 处理能力。而且，正如我在上一篇文章中所说，本地网络中的设备位于（至少一个）防火墙后面，只要没有其他人对网络具有物理访问权限，MQTT客户端和服务器之间的传输加密就不是真正需要的。但是，通过互联网的远程客户端需要TLS / SSL。</p>
<p>在OpenWrt上安装和配置Mosquitto™<br>
安装在OpenWrt上<br>
确保OpenWrt本身作为网络客户端可以连接到互联网。转到网络 - 诊断。如果无法 ping 有效域，请转到&quot;网络&quot; - DHCP 和 DNS，然后在&quot;服务器设置&quot; - &quot;常规设置&quot; - &quot;DNS 转发&quot;中，添加服务器 8.8.8.8 和 8.8.4.4。通过 WAN 提供的 DNS 服务器无法到达 LAN 区域，这就是您必须设置自定义服务器的原因。</p>
<p>转到&quot;系统&quot;-&quot;软件&quot;-&quot;操作&quot;。首先单击&quot;更新列表&quot;，然后在完成搜索后搜索mosquitto。在&quot;可用包&quot;列表中查找 mosquitto-ssl 并进行安装。路由器本身可以发布 MQTT 数据包，并接收到/从代理接收 MQTT 数据包。为了能够做到这一点，请安装mosquitto-client-ssl。如果通过串行端口或通过网络 SSH 连接到路由器，也可以从命令行执行安装。</p>
<p>opkg update<br>
opkg install mosquitto-ssl<br>
opkg install mosquitto-client-ssl libmosquitto-ssl<br>
此时，服务器应正在运行。转到状态 - 进程并搜索&quot;mosquitto&quot;。如果找不到它，则需要进入控制台，以启用并启动它。</p>
<p>/etc/init.d/mosquitto enable<br>
/etc/init.d/mosquitto restart<br>
使用您喜欢的任何客户端并测试与服务器的连接。如果您关注了我之前的帖子，服务器地址如下：</p>
<p>mqtt-broker.lan，用于连接到OpenWrt路由器网络（又名物联网网络）的设备。这不是多播DNS地址，它由路由器的DNS服务器解析;<br>
192.168.1.222（或您在网关的 DHCP 服务器中保留的任何内容），用于从家庭网络连接到代理的设备（通过 OpenWrt 路由器的 WAN 端口路由的流量）。<br>
从物联网网络外部测试连接。您可以在移动设备上使用 MQTT Dash，或在计算机上使用 MQTT.fx，MQTT Explorer。默认情况下，不需要 TLS/SSL 和用户/密码。港口是1883年。</p>
<p>编辑配置<br>
要编辑存储在路由器上的配置文件并上传证书，您必须通过 SCP 连接到它。我正在使用WinSCP。它是Windows的免费软件，但我在Ubuntu上的Wine中运行它，因为我找不到Linux的SCP GUI。作为客户端连接到 OpenWrt 路由器（物联网网络）的 LAN 网络中。</p>
<p>WinSCP 连接设置<br>
WinSCP 连接设置</p>
<p>上面屏幕截图左侧列表中的所有连接预设都是有效的。虽然第一个（root@192.168.1.222）是WAN IP，但它也可以从LAN访问。使用当前的防火墙设置，仅从 LAN。某些端口需要在 WAN 端打开，以允许通过 WAN 进行访问。另外两个是路由器的IP地址和由路由器的DNS服务器解析为其自己的IP的域名。单击&quot;登录&quot;后，它将显示一条警告。接受它，然后单击是/更新以通过 SCP 启动连接。</p>
<p>您将只在右列上工作。浏览到 /etc/mosquitto 并重命名（甚至删除）mosquitto.conf。如果打开它，您将看到它只是一个没有使用任何参数的模板。对于以下方案，我们将创建自己的配置：</p>
<p>默认侦听器：不安全，位于端口 1883 上，用于不支持 TLS/SSL 的内容。端口被阻止远程客户端（通过互联网）。<br>
安全侦听器：在端口 8883 上，带有 CA、证书和密钥，用于远程访问（本地客户端和事物也可以使用它）<br>
安全侦听器：在端口 8884 上，使用 PSK（预共享密钥），用于操作。端口被阻止远程客户端（通过互联网）。<br>
接下来，我将为所有这些情况创建配置。</p>
<p>不安全的侦听器<br>
对于不安全的客户端，建议的端口为 1883。首先，应为客户端创建一些凭据。使用 PuTTY 通过 SSH 或串行端口连接到路由器。WinSCP和PuTTY可以同时连接。使用此命令创建具有第一个用户的passwd文件（在我的示例中用户名为&quot;Thing01&quot;;可以替换为所需的任何名称）：</p>
<p>mosquitto_passwd -c /etc/mosquitto/passwords.txt Thing01<br>
使用此命令添加更多用户：</p>
<p>mosquitto_passwd /etc/mosquitto/passwords.txt Thing02<br>
继续并在WinSCP中打开该文件（/etc/mosquitto/passwords.txt）。您应该会看到添加的（两个）用户和加密的密码。让我们配置默认侦听器。在 WinSCP 中打开 mosquitto.conf 并粘贴以下配置：</p>
<p>#Default listener<br>
port 1883<br>
allow_anonymous false<br>
password_file /etc/mosquitto/passwords.txt<br>
使用 从命令行 （PuTTY） 停止 Mosquitto。现在启动它并详细打开。/etc/init.d/mosquitto stop</p>
<p>mosquitto -v -c /etc/mosquitto/mosquitto.conf<br>
我使用在 Ubuntu 本地客户端上运行的 MQTT.fx 和 MQTT Explorer 测试了服务器。以下是配置连接的方法。</p>
<p>MQTT 资源管理器中的连接设置<br>
MQTT 资源管理器中的连接设置</p>
<p>不安全的侦听器已准备就绪。为受保护的侦听器生成 SSL 证书和密钥并不是一个简短的主题。您可以在以后的帖子中阅读有关它的信息。</p>
<p>PSK 安全侦听器<br>
建议在性能受限的环境中使用预共享密钥 （TLS PSK） 加密 MQTT 传输，例如 CPU 功耗有限的微控制器。密钥由数字和字母 A 到 F（十六进制数字）组成。服务器和客户端都必须知道此密钥。</p>
<p>PSK 存储在文本文件中，就像用户凭据一样。我们将在 /etc/mosquitto 中创建该文件。使用 WinSCP，右键单击该文件夹，然后选择&quot;新建 - 文件&quot;。输入一个名称（&quot;preshared.keys&quot;），文本编辑器将打开并显示此新文件。格式为提示：键。提示可以被视为用户名，而密钥是密码。如何生成密钥？由于我使用的是linux，因此我打开任何文件夹中的终端（控制台），并计算文件的md5sum。这些是我的PSK条目：</p>
<p>Thing01:20a7da651a0743214cde51050398cffb<br>
Thing02:eda7b5211a6e306c02de401900dc63bc<br>
保存并关闭编辑器。继续打开mosquitto.conf。默认侦听器的设置（从上面）应该已经存在。PSK 文件选项是全局的，而 PSK 加密的使用是按侦听器。将内容替换为以下内容：</p>
<h1 id="global">Global</h1>
<h1 id="must-be-set-before-configuring-listeners">Must be set before configuring listeners</h1>
<p>per_listener_settings true</p>
<h1 id="default-listener">Default listener</h1>
<p>port 1883</p>
<h1 id="psk-listener">PSK listener</h1>
<p>listener 8884<br>
psk_hint &quot;mqttbroker&quot;<br>
use_identity_as_username true</p>
<h1 id="security">Security</h1>
<p>allow_anonymous false<br>
password_file /etc/mosquitto/passwords.txt<br>
psk_file /etc/mosquitto/preshared.keys<br>
配置文件中参数的顺序应与原始文件中的顺序匹配。否则，可能会发生错误。为了测试此配置，我使用了mosquitto_pub。</p>
<p>mosquitto_pub -h mqtt-broker.lan -p 8884 -t test -m &quot;Hello PSK&quot; --psk-identity Thing01 --psk 20a7da651a0743214cde51050398cffb<br>
如果出现问题，它会告诉您发生了TLS错误。不是很有用。设置为 true 的选项将禁用用户/密码身份验证。不建议使用多种身份验证方法。使用 PSK 提示中的用户名标识时禁用默认 MQTT 用户/密码身份验证。use_identity_as_username</p>
<p>此时，我有一个在 OpenWrt 路由器上运行的 MQTT 代理，该代理在端口 1883 上侦听不安全客户端，在端口 8884 上侦听 TLS PSK 安全客户端。在下一篇文章中，我将添加基于证书的TLS加密，服务器配置完成。各种客户端配置如下（ESP8266、ESP32 等）</p>
<figure data-type="image" tabindex="1"><img src="https://tao173.github.io/post-images/1648524378322.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenWrt插件+硬件]]></title>
        <id>https://tao173.github.io/post/1111/</id>
        <link href="https://tao173.github.io/post/1111/">
        </link>
        <updated>2022-03-25T13:54:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="openwrt插件汇总">OpenWrt插件汇总：</h2>
<figure data-type="image" tabindex="1"><img src="https://tao173.github.io/post-images/1648220047819.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://tao173.github.io/post-images/1648220065291.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://tao173.github.io/post-images/1648220153296.png" alt="" loading="lazy"></figure>
<h2 id="更新链接httpswwwrightcomcnforumthread-344825-1-1html">更新链接：https://www.right.com.cn/forum/thread-344825-1-1.html</h2>
<h2 id="路由器硬件汇总">路由器硬件汇总：</h2>
<figure data-type="image" tabindex="4"><img src="https://tao173.github.io/post-images/1648222796202.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://tao173.github.io/post-images/1648222803237.png" alt="" loading="lazy"></figure>
<h2 id="更新链接httpswwwacwifinet15132html">更新链接：https://www.acwifi.net/15132.html</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenWrt 编译步骤与命令详解教程]]></title>
        <id>https://tao173.github.io/post/openwrt-bian-yi-bu-zou-yu-ming-ling-xiang-jie-jiao-cheng/</id>
        <link href="https://tao173.github.io/post/openwrt-bian-yi-bu-zou-yu-ming-ling-xiang-jie-jiao-cheng/">
        </link>
        <updated>2022-03-21T11:24:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="首次编译">首次编译</h2>
<h2 id="克隆-openwrt-源码">克隆 Open­Wrt 源码</h2>
<p>git clone https://github.com/coolsnowwolf/lede openwrt<br>
这里以 Lean 大佬的源码仓库为例子，毕竟很多人都在用它。命令末尾加了openwrt是指克隆代码到openwrt目录，目的是为了规范化，因为有时并不是编译这个的源码。</p>
<h2 id="进入源码目录">进入源码目录</h2>
<p>cd openwrt</p>
<h2 id="下载-feeds-源中的软件包源码">下载 feeds 源中的软件包源码</h2>
<p>./scripts/feeds update -a<br>
feeds 是扩展的软件包，独立于 Open­Wrt 源码之外，所以需要单独进行拉取和更新。</p>
<h2 id="安装-feeds-中的软件包">安装 feeds 中的软件包</h2>
<p>./scripts/feeds install -a</p>
<h2 id="调整-openwrt-系统组件">调整 Open­Wrt 系统组件</h2>
<p>make menuconfig<br>
首次编译建议只选择架构，其它都不要动，这样编译成功率会更高。如果不打算调整组件则输入make defconfig，它会检测编译环境并生成默认的编译配置文件。</p>
<h2 id="预下载编译所需的软件包">预下载编译所需的软件包</h2>
<p>make download -j8 V=s<br>
-j8是指使用8个线程下载，理论上是数字越大下载越快，但似乎有个上限，实测5线程以上其实速度相差不了多少，在网络好的情况下，基本在5分钟以内能下载完。</p>
<h2 id="检查文件完整性">检查文件完整性</h2>
<p>find dl -size -1024c -exec ls -l {} ;<br>
此命令可以列出下载不完整的文件（根据我多次编译的经验得出小于1k的文件属于下载不完整），如果存在这样的文件可以使用find dl -size -1024c -exec rm -f {} ;命令将它们删除，然后重新执行make download下载并反复检查，确认所有文件完整可大大提高编译成功率，避免浪费时间。</p>
<h2 id="开始编译">开始编译</h2>
<p>make -j1 V=s<br>
-j1：使用单线程编译。新手推荐单线程编译，一是因为玄学问题可能成功率高，二是方便查看错误日志。<br>
V=s：输出详细日志，用于编译失败时找出错误。而且满屏代码在跑能装逼，一跑就是几个小时，装逼更持久。</p>
<h2 id="再次编译">再次编译</h2>
<h2 id="进入源码目录如果不在此目录">进入源码目录（如果不在此目录）</h2>
<p>cd openwrt</p>
<h2 id="更新">更新</h2>
<p>TIPS： 短期内再次编译可忽略更新这个步骤。</p>
<h2 id="更新系统软件包">更新系统软件包</h2>
<p>sudo sh -c &quot;apt update &amp;&amp; apt upgrade -y&quot;<br>
主要作用是更新在编译环境搭建时所安装的编译组件</p>
<h2 id="拉取-openwrt-源码更新">拉取 Open­Wrt 源码更新</h2>
<p>git pull</p>
<h2 id="更新-feeds-源中的软件包源码">更新 feeds 源中的软件包源码</h2>
<p>./scripts/feeds update -a</p>
<h2 id="安装-feeds-中的软件包-2">安装 feeds 中的软件包</h2>
<p>./scripts/feeds install -a</p>
<h2 id="文件清理">文件清理</h2>
<h2 id="清除旧的编译产物可选">清除旧的编译产物（可选）</h2>
<p>make clean<br>
在源码有大规模更新或者内核更新后执行，以保证编译质量。此操作会删除/bin和/build_dir目录中的文件。</p>
<h2 id="清除旧的编译产物-交叉编译工具及工具链等目录可选">清除旧的编译产物、交叉编译工具及工具链等目录（可选）</h2>
<p>make dirclean<br>
更换架构编译前必须执行。此操作会删除/bin和/build_dir目录的中的文件(make clean)以及/staging_dir、/toolchain、/tmp和/logs中的文件。</p>
<h2 id="清除-openwrt-源码以外的文件可选">清除 Open­Wrt 源码以外的文件（可选）</h2>
<p>make distclean<br>
除非是做开发，并打算 push 到 GitHub 这样的远程仓库，否则几乎用不到。此操作相当于make dirclean外加删除/dl、/feeds目录和.config文件。</p>
<h2 id="还原-openwrt-源码到初始状态可选">还原 Open­Wrt 源码到初始状态（可选）</h2>
<p>git clean -xdf<br>
如果把源码改坏了，或者长时间没有进行编译时使用。</p>
<h2 id="清除临时文件">清除临时文件</h2>
<p>rm -rf tmp<br>
删除执行make menuconfig后产生的一些临时文件，包括一些软件包的检索信息，删除后会重新加载package目录下的软件包。若不删除会导致一些新加入的软件包不显示。</p>
<h2 id="删除编译配置文件">删除编译配置文件</h2>
<p>rm -f .config<br>
在不删除的情况下如果取消选择某些组件它的依赖组件不会自动取消，所以对于需要调整组件的情况下建议删除。</p>
<h2 id="编译">编译</h2>
<p>调整 Open­Wrt 系统组件<br>
make menuconfig<br>
如果不打算调整组件则输入make defconfig，它会检测编译环境并根据更新自动调整编译配置文件。</p>
<h2 id="预下载编译所需的软件包-2">预下载编译所需的软件包</h2>
<p>make download -j8 V=s</p>
<h2 id="检查文件完整性-2">检查文件完整性</h2>
<p>find dl -size -1024c -exec ls -l {} ;<br>
此命令可以列出下载不完整的文件（根据我多次编译的经验得出小于1k的文件属于下载不完整），如果存在这样的文件可以使用find dl -size -1024c -exec rm -f {} ;命令将它们删除，然后重新执行make download下载并反复检查，确认所有文件完整可大大提高编译成功率，避免浪费时间。</p>
<h2 id="开始编译-2">开始编译</h2>
<p>make -j$(nproc) || make -j1 || make -j1 V=s<br>
多线程编译失败后自动进入单线程编译，失败则输出详细日志。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[智能家居HA]]></title>
        <id>https://tao173.github.io/post/zhi-neng-jia-ju-ha/</id>
        <link href="https://tao173.github.io/post/zhi-neng-jia-ju-ha/">
        </link>
        <updated>2021-12-05T06:18:19.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>开源智能家居平台homeassistant个人配置。</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<h2 id="联系我呀">📬 联系我呀</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://tao173.github.io/post/about/</id>
        <link href="https://tao173.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<h2 id="联系我呀">📬 联系我呀</h2>
]]></content>
    </entry>
</feed>